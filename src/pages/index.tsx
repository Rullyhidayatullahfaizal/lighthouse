import Head from "next/head";
import { useState } from "react";
import { useGitHub } from "../context/GitHubContext";
import { useRouter } from "next/router";
import axios from "axios";
import LitButton from "@/components/ui/button";
import LitModal from "@/components/ui/modal";

export default function Home() {
  const [input, setInput] = useState("");
  const [showModal, setShowModal] = useState(false);
  const [loading, setLoading] = useState(false);
  const [modalMessage, setModalMessage] = useState("");
  const { setUsername, setRepos } = useGitHub();
  const router = useRouter();

  const handleSearch = async () => {
    if (!input) return;
    setLoading(true);
    setUsername(input);

    try {
      const response = await axios.get(
        `https://api.github.com/users/${input}/repos`
      );

      // If the user does not have a repository (but the username is valid)
      if (response.data.length === 0) {
        setModalMessage("The GitHub username you entered does not exist.");
        setShowModal(true);
        return;
      }

      // If successful, set the repository and navigate to the projects page
      setRepos(response.data);
      router.push(`/projects`);
    } catch (error) {
      if (axios.isAxiosError(error)) {
        if (error.response?.status === 403) {
          console.warn("GitHub API rate limit exceeded!");
          setModalMessage(
            "You have exceeded the GitHub API request limit. Please try again later."
          );
        } else if (error.response?.status === 404) {
          setModalMessage("The GitHub username you entered does not exist.");
        } else {
          setModalMessage("An error occurred while fetching data.");
        }
      } else {
        setModalMessage("An unknown error occurred.");
      }
      setShowModal(true);
    } finally {
      setLoading(false);
    }
  };

  return (
    <>
      <Head>
        <title>Best Practice</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="search-container">
        <h1 className="search-title">GitHub Repository Finder</h1>
        <div className="input-search">
          <input
            className="search-box"
            placeholder="search name github"
            type="text"
            value={input}
            onChange={(e) => setInput(e.target.value)}
          />
          <LitButton onClick={handleSearch} disabled={loading}>
            {loading ? "Loading..." : "Search"}
          </LitButton>
        </div>
      </div>

      {/* LitModal with a dynamic modalMessage */}

      {showModal && (
        <LitModal onClose={() => setShowModal(false)}>
          <h2>Error</h2>
          <p>{modalMessage}</p>
        </LitModal>
      )}
    </>
  );
}
